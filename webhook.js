const admin = require('firebase-admin');
const { getFirestore, FieldValue, Timestamp } = require('firebase-admin/firestore');
const { OpenAI } = require('openai');
const fetch = require('node-fetch');
const { onRequest } = require('firebase-functions/v2/https');
const { Buffer } = require('buffer');
const { Blob, File } = require('buffer');
// Importar fun√ß√µes do whatsappService.js - GARANTIR QUE normalizarTelefoneBrasil EST√Å AQUI
const { enviarMensagemWhatsApp, normalizarTelefoneBrasil } = require("./whatsappService.js"); // Ajuste o caminho se necess√°rio

console.log('üöÄ Iniciando inicializa√ß√£o do webhook...');

// Adicionando a fun√ß√£o gerarRelatorio aqui
async function gerarRelatorio(periodo, igrejaId, dataInicioCustom = null, dataFimCustom = null) { // <<< ADICIONADO igrejaId AQUI
  console.log(`üìä Gerando relat√≥rio ${periodo} para Igreja ID: ${igrejaId}`);
  const agora = new Date();
  let dataInicio, dataFim;

  // Fun√ß√£o auxiliar para converter string DD/MM/AAAA para Date
  const parseDate = (dateString) => {
    if (!dateString || typeof dateString !== 'string') return null;
    const parts = dateString.split('/');
    if (parts.length === 3) {
      // M√™s √© 0-indexado no construtor Date(ano, m√™s, dia)
      return new Date(parseInt(parts[2], 10), parseInt(parts[1], 10) - 1, parseInt(parts[0], 10));
    }
    return null;
  };

  // Definir o intervalo de datas com base no per√≠odo
  if (periodo === "personalizado" && dataInicioCustom && dataFimCustom) {
    dataInicio = parseDate(dataInicioCustom);
    dataFim = parseDate(dataFimCustom);
    // Ajustar dataFim para incluir o dia inteiro (at√© 23:59:59.999)
    if (dataFim) {
        dataFim.setHours(23, 59, 59, 999);
    }
    if (!dataInicio || !dataFim) {
        console.error(`  -> Datas personalizadas inv√°lidas: ${dataInicioCustom}, ${dataFimCustom}`);
        return "‚ùå Datas personalizadas inv√°lidas. Use o formato DD/MM/AAAA.";
    }
    console.log(`  -> Per√≠odo personalizado: ${dataInicio.toISOString()} a ${dataFim.toISOString()}`);

  } else {
    dataFim = agora; // Fim √© sempre agora para per√≠odos n√£o personalizados
    if (periodo === "hoje") {
        dataInicio = new Date(agora);
        dataInicio.setHours(0, 0, 0, 0); // Come√ßo do dia de hoje
    } else if (periodo === "semanal" || periodo === "semana_atual") { // Adicionado semana_atual
      dataInicio = new Date(agora);
      dataInicio.setDate(agora.getDate() - agora.getDay()); // Vai para o √∫ltimo domingo
      dataInicio.setHours(0, 0, 0, 0);
    } else if (periodo === "mes_atual") { // Adicionado mes_atual
        dataInicio = new Date(agora.getFullYear(), agora.getMonth(), 1);
        dataInicio.setHours(0, 0, 0, 0);
    } else if (periodo === "ultimos_7_dias") {
        dataInicio = new Date(agora.getTime() - 7 * 24 * 60 * 60 * 1000);
    } else if (periodo === "ultimos_15_dias") {
        dataInicio = new Date(agora.getTime() - 15 * 24 * 60 * 60 * 1000);
    } else if (periodo === "ultimos_30_dias") {
        dataInicio = new Date(agora.getTime() - 30 * 24 * 60 * 60 * 1000);
    } else if (periodo === "ano_atual") {
        dataInicio = new Date(agora.getFullYear(), 0, 1);
        dataInicio.setHours(0, 0, 0, 0);
    } else {
      console.error(`  -> Per√≠odo inv√°lido solicitado: ${periodo}`);
      return "‚ùå Per√≠odo inv√°lido. Use: hoje, semana_atual, mes_atual, ultimos_7_dias, ultimos_15_dias, ultimos_30_dias, ano_atual ou personalizado DD/MM/AAAA DD/MM/AAAA.";
    }
    console.log(`  -> Per√≠odo ${periodo}: ${dataInicio.toISOString()} a ${dataFim.toISOString()}`);
  }

  try {
    // --- MODIFICA√á√ÉO FIRESTORE: Buscar transa√ß√µes na subcole√ß√£o da igreja correta ---
    const transacoesQuery = db.collection("igrejas").doc(igrejaId).collection("transacoes")
      .where("data", ">=", Timestamp.fromDate(dataInicio)) // Usa Timestamp para compara√ß√£o
      .where("data", "<=", Timestamp.fromDate(dataFim))
      .orderBy("data", "asc"); // Ordena por data para clareza no relat√≥rio
      
    const transacoesSnap = await transacoesQuery.get();
    console.log(`  -> Consulta Firestore: /igrejas/${igrejaId}/transacoes entre ${dataInicio.toLocaleDateString("pt-BR")} e ${dataFim.toLocaleDateString("pt-BR")}. Encontradas: ${transacoesSnap.size} transa√ß√µes.`);

    let totalEntradas = 0;
    let totalSaidas = 0;
    let listaTransacoes = "";
    let contadorTransacoes = 0;
    const limiteTransacoesListadas = 30; // Limite para n√£o estourar a mensagem do WhatsApp

    transacoesSnap.forEach(doc => {
      const transacao = doc.data();
      const valor = parseFloat(transacao.valor) || 0;
      const tipo = transacao.tipo;
      const membro = transacao.membro || "N√£o informado";
      const descricao = transacao.descricao || "Sem descri√ß√£o";
      // Converte Timestamp do Firestore para Date do JS para formatar
      const dataTransacao = transacao.data.toDate ? transacao.data.toDate() : new Date(); 
      const dataFormatada = dataTransacao.toLocaleDateString("pt-BR");

      if (tipo === "entrada") {
        totalEntradas += valor;
        if (contadorTransacoes < limiteTransacoesListadas) {
            listaTransacoes += `üì• ${dataFormatada}: +R$ ${valor.toFixed(2)} (${descricao} - ${membro})\n`;
            contadorTransacoes++;
        }
      } else if (tipo === "saida") { // Corrigido para 'saida'
        totalSaidas += valor;
        if (contadorTransacoes < limiteTransacoesListadas) {
            listaTransacoes += `üì§ ${dataFormatada}: -R$ ${valor.toFixed(2)} (${descricao} - ${membro})\n`;
            contadorTransacoes++;
        }
      }
    });

    // Monta a resposta final
    let resposta = `üìä Relat√≥rio ${periodo.charAt(0).toUpperCase() + periodo.slice(1)}
`;
    resposta += `‚õ™ Igreja ID: ${igrejaId}\n`; // Adiciona o ID da igreja
    resposta += `üìÖ Per√≠odo: ${dataInicio.toLocaleDateString("pt-BR")} a ${dataFim.toLocaleDateString("pt-BR")}\n\n`;
    
    if (transacoesSnap.empty) {
        resposta += "‚ÑπÔ∏è Nenhuma transa√ß√£o encontrada no per√≠odo.\n";
    } else {
        resposta += listaTransacoes;
        if (contadorTransacoes >= limiteTransacoesListadas) {
            resposta += `\n... (e mais ${transacoesSnap.size - limiteTransacoesListadas} transa√ß√µes)`;
        }
    }

    resposta += `\nüí∞ Total Entradas: R$ ${totalEntradas.toFixed(2)}\n`;
    resposta += `üí∏ Total Sa√≠das: R$ ${totalSaidas.toFixed(2)}\n`;
    resposta += `‚öñÔ∏è Saldo do Per√≠odo: R$ ${(totalEntradas - totalSaidas).toFixed(2)}\n`;

    console.log(`  -> Relat√≥rio gerado com sucesso.`);
    return resposta;

  } catch (error) {
    console.error(`‚ùå Erro ao gerar relat√≥rio para igreja ${igrejaId}:`, error);
    // Retorna uma mensagem de erro para ser enviada ao WhatsApp
    return "‚ùå Ocorreu um erro ao buscar os dados para gerar o relat√≥rio. Tente novamente.";
  }
}

console.log('üîç Verificando inicializa√ß√£o do Firebase Admin...');
console.log('FieldValue dispon√≠vel:', !!FieldValue);
console.log('Timestamp dispon√≠vel:', !!Timestamp);

const db = getFirestore();

// Inicializar OpenAI
let openai;
try {
  console.log('üîë Verificando OPENAI_API_KEY...');
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    console.error('‚ùå OPENAI_API_KEY n√£o est√° configurada no ambiente.');
    throw new Error('OPENAI_API_KEY n√£o est√° configurada no ambiente. Configure-a usando firebase functions:config:set openai.api_key="sua-chave-aqui"');
  }
  console.log('‚úÖ OPENAI_API_KEY encontrada:', apiKey.substring(0, 5) + '...');
  openai = new OpenAI({
    apiKey: apiKey,
  });
  console.log('‚úÖ OpenAI inicializado com sucesso.');
} catch (error) {
  console.error('‚ùå Erro ao inicializar OpenAI:', error.message);
  throw error;
}

console.log('üåê Verificando porta do ambiente...');
const port = process.env.PORT || 8080;
console.log(`üåê Porta configurada: ${port}`);

// --- REMOVIDA A FUN√á√ÉO normalizarTelefoneBrasil DUPLICADA DAQUI ---
// A fun√ß√£o agora √© importada do whatsappService.js no topo do arquivo.

function gerarIdentificador() {
  const letras = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const numeros = "0123456789";
  const partes = [
    letras[Math.floor(Math.random() * letras.length)],
    letras[Math.floor(Math.random() * letras.length)],
    letras[Math.floor(Math.random() * letras.length)],
    numeros[Math.floor(Math.random() * numeros.length)],
    numeros[Math.floor(Math.random() * numeros.length)],
  ];
  return "IG" + partes.join("");
}

function extrairValor(mensagem) {
  // Normalizar a mensagem para facilitar a busca
  const mensagemNormalizada = mensagem.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");

  // Regex para capturar valores monet√°rios em diferentes formatos
  // Captura n√∫meros no formato "270,00", "270.00", "R$ 270,00", "270 reais", "$270", etc.
  const regex = /(?:r\$|\$)?\s*(?:no\s+valor\s+(?:de\s+))?([\d.,]+)(?:\s*(?:reais))?|(?:valor\s+(?:de\s+)?r\$?\s*([\d.,]+))/gi;

  // Palavras-chave que indicam um contexto monet√°rio
  const palavrasChave = ["valor", "no valor de", "r$", "reais", "custa", "custou", "paguei", "pago"];

  // Encontrar todas as correspond√™ncias
  let matches = [];
  let match;
  while ((match = regex.exec(mensagemNormalizada)) !== null) {
    // Captura o valor do grupo 1 ou 2 (dependendo do formato)
    const valorCapturado = match[1] || match[2];
    if (valorCapturado) {
      matches.push({
        valor: valorCapturado,
        indice: match.index,
      });
    }
  }

  if (matches.length === 0) {
    console.log("‚ö†Ô∏è Nenhum valor monet√°rio encontrado na mensagem:", mensagem);
    return null;
  }

  // Se houver mais de um valor, priorizar o que est√° mais pr√≥ximo de uma palavra-chave monet√°ria
  let valorSelecionado = null;
  let menorDistancia = Infinity;

  for (const match of matches) {
    let distanciaMinima = Infinity;
    for (const palavra of palavrasChave) {
      const posicaoPalavra = mensagemNormalizada.indexOf(palavra);
      if (posicaoPalavra !== -1) {
        const distancia = Math.abs(posicaoPalavra - match.indice);
        if (distancia < distanciaMinima) {
          distanciaMinima = distancia;
        }
      }
    }
    if (distanciaMinima < menorDistancia) {
      menorDistancia = distanciaMinima;
      valorSelecionado = match.valor;
    }
  }

  // Se n√£o houver palavras-chave para priorizar, usar o √∫ltimo valor encontrado
  if (!valorSelecionado) {
    valorSelecionado = matches[matches.length - 1].valor;
  }

  // Converter o valor capturado para n√∫mero
  let valorStr = valorSelecionado.replace(/\./g, '').replace(',', '.');
  let valor = parseFloat(valorStr);
  if (isNaN(valor)) {
    console.log("‚ö†Ô∏è Valor capturado n√£o √© um n√∫mero v√°lido:", valorSelecionado);
    return null;
  }

  console.log(`üí∞ Valor extra√≠do: R$ ${valor.toFixed(2)} da mensagem: ${mensagem}`);
  return valor;
}

async function detectarNomeMembro(mensagemOriginal, igrejaId) { // <<< ADICIONADO igrejaId AQUI
  console.log(`üîç Tentando detectar nome de membro na mensagem para Igreja ID: ${igrejaId}`);
  
  // Fun√ß√£o interna para normalizar strings (remover acentos, min√∫sculas, trim)
  const normalizar = (str) => {
    if (!str || typeof str !== 'string') return ''; // Retorna string vazia se a entrada for inv√°lida
    return str.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").trim();
  }

  const mensagemNormalizada = normalizar(mensagemOriginal);
  if (!mensagemNormalizada) {
      console.warn("  -> Mensagem original normalizada resultou em string vazia. Imposs√≠vel detectar nome.");
      return null;
  }

  try {
    // --- MODIFICA√á√ÉO FIRESTORE: Buscar membros na subcole√ß√£o da igreja correta ---
    const membrosSnapshot = await db.collection("igrejas").doc(igrejaId).collection("membros").get();
    console.log(`  -> Buscando em /igrejas/${igrejaId}/membros. Encontrados: ${membrosSnapshot.size} membros.`);

    // Itera sobre os documentos dos membros encontrados
    for (const doc of membrosSnapshot.docs) {
      const membroData = doc.data();
      const nomeSalvo = membroData.nome; // Pega o nome do membro do documento
      
      // Verifica se o nome existe e √© uma string antes de normalizar
      if (nomeSalvo && typeof nomeSalvo === 'string') {
          const nomeNormalizado = normalizar(nomeSalvo);
          
          // Verifica se o nome normalizado n√£o est√° vazio e se est√° contido na mensagem normalizada
          if (nomeNormalizado && mensagemNormalizada.includes(nomeNormalizado)) {
            console.log(`    -> Nome encontrado: '${nomeSalvo}' (ID: ${doc.id})`);
            // Retorna o ID do documento e o nome original
            return { id: doc.id, nome: nomeSalvo }; 
          }
      } else {
          console.warn(`  -> Membro com ID ${doc.id} na igreja ${igrejaId} n√£o possui um nome v√°lido.`);
      }
    }

    // Se o loop terminar sem encontrar nenhum nome
    console.log("  -> Nenhum nome de membro conhecido encontrado na mensagem.");
    return null;

  } catch (error) {
      console.error(`‚ùå Erro ao buscar membros para detec√ß√£o de nome na igreja ${igrejaId}:`, error);
      // Retorna null em caso de erro para n√£o interromper o fluxo principal
      return null; 
  }
}

async function atualizarCadastroMembro(membroId, dizimo, igrejaId) { // <<< ADICIONADO igrejaId AQUI
  console.log(`üìã Atualizando cadastro do membro ${membroId} na Igreja ID: ${igrejaId} com d√≠zimo de R$ ${dizimo.toFixed(2)}`);
  // --- MODIFICA√á√ÉO FIRESTORE: Refer√™ncia correta ao membro na subcole√ß√£o da igreja ---
  const membroRef = db.collection("igrejas").doc(igrejaId).collection("membros").doc(membroId);
  
  try {
    // Atualizar o status de dizimista
    await membroRef.update({
      dizimista: true,
    });
    console.log(`  -> Status dizimista atualizado para true.`);

    // Adicionar o d√≠zimo √† subcole√ß√£o "dizimos" do membro
    await membroRef.collection("dizimos").add({
      valor: dizimo,
      data: Timestamp.now(), // Usar Timestamp.now() para consist√™ncia
    });
    console.log(`  -> Registro de d√≠zimo adicionado √† subcole√ß√£o 'dizimos'.`);

  } catch (error) {
    console.error(`‚ùå Erro ao atualizar cadastro ou adicionar d√≠zimo para membro ${membroId} na igreja ${igrejaId}:`, error);
    // Considerar se deve lan√ßar o erro ou apenas logar
    // throw error; // Lan√ßar o erro pode interromper o processamento de m√∫ltiplos d√≠zimos
  }
}

async function cadastrarMembroWhatsApp(mensagem, telefone, igrejaId) { // <<< ADICIONADO igrejaId AQUI
  console.log("üìù Mensagem recebida para cadastro:", mensagem);
  console.log(`‚õ™ Para Igreja ID: ${igrejaId}`); // Log do igrejaId recebido

  let telefoneMembro = "0"; // Valor padr√£o se n√£o houver telefone na mensagem
  let mensagemSemTelefone = mensagem; // Criar uma c√≥pia da mensagem para remover o telefone ap√≥s extra√ß√£o

  // Tentar extrair um n√∫mero de telefone da mensagem
  const regexTelefone = /(?:telefone|celular|contato)?\s*(?:\+55)?\s*(\d{2}\s*\d{1}\s*\d{4}\s*-?\s*\d{4}|\d{2}\s*\d{8,9}|\d{10,11})/i;
  const matchTelefone = mensagem.match(regexTelefone);
  if (matchTelefone) {
    const numeroEncontrado = matchTelefone[1].replace(/[\s-]/g, "");
    telefoneMembro = normalizarTelefoneBrasil(numeroEncontrado);
    if (!telefoneMembro) {
      console.log("‚ö†Ô∏è N√∫mero de telefone extra√≠do da mensagem √© inv√°lido. Definindo como 0.");
      telefoneMembro = "0";
    } else {
      console.log("üìû Telefone extra√≠do da mensagem e normalizado:", telefoneMembro);
      mensagemSemTelefone = mensagem.replace(matchTelefone[0], "").trim();
    }
  } else {
    console.log("üìû Nenhum telefone encontrado na mensagem. Definindo como 0.");
  }

  let nome = "";
  let idade = 0;
  let funcao = [];
  let profissao = "";
  let estadoCivil = "";
  let dizimista = false;
  let batizado = false;
  let cursos = {
    encontroComDeus: false,
    cursoDeBatismo: false,
    maturidadeNoEspirito: false,
    escolaDeLideres: false,
    outros: [],
  };

  const mensagemNormalizada = mensagemSemTelefone
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .toLowerCase();

  let partes = mensagemSemTelefone.split(",").map(parte => parte.trim());
  console.log("üìã Partes:", partes);

  if (partes[0]) {
    nome = partes[0].replace(/^(cadastro de|cadastro)\s+/i, "").trim();
    nome = nome
      .split(" ")
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(" ");
  }
  console.log("üìã Nome:", nome);

  const funcoesFixas = [
    "membro", "membra", "lider", "pastor", "pastora", "diacono", "diaconisa",
    "missionario", "missionaria", "obreiro", "obreira", "midias sociais",
    "fotografo", "fotografa", "filmador", "filmadora", "louvor", "musico",
    "musicista", "levita", "equipe de musica", "cantina", "recepcionista",
    "iluminacao", "tecnico de som", "tecnica de som", "lider de jovens",
    "lider de mulheres", "lider de homens", "servicos sociais", "departamento kids",
    "intercessor", "intercessora", "evangelista", "professor de escola biblica",
    "professora de escola biblica", "auxiliar de escola biblica", "tesoureiro",
    "tesoureira", "secretario", "secretaria", "porteiro", "porteira", "zelador",
    "zeladora", "danca", "teatro", "coreografia", "equipe de eventos",
    "organizador de retiros", "organizadora de retiros", "aconselhador",
    "aconselhadora", "visitador", "visitadora", "capelao", "capela", "lider de pequeno grupo",
    "equipe de oracao", "equipe de limpeza", "equipe de manutencao",
    "equipe de comunicacao", "editor de videos", "editora de videos",
    "designer grafico", "designer grafica", "projecao", "sonoplasta",
    "interprete de libras", "equipe de casais", "equipe de saude",
    "discipulador", "discipuladora", "supervisor", "supervisora", "baterista", "guitarrista", 
    "tecladista", "baixista", "vocalista", "pianista", "violonista", "saxofonista", "trompetista", 
    "flautista", "violoncelista", "violinista", "percussionista", "acordeonista", "trombonista", 
    "clarinetista", "obo√≠sta", "fagocista", "harpista", "sanfonista", "ukulelista", "bandolinista", 
    "cavaquinista", "berimbauista", "atabaquista", "pandeirista", "triadista", "zabumbista", "gaitista", 
    "sitarista", "kora√≠sta", "balafonista", "didgeridoo√≠sta", "eremita", "lirista", "organista"
  ];

  const profissoesFixas = [
    "medico", "medica", "professor", "professora", "engenheiro", "engenheira",
    "autonomo", "autonoma", "vendedor", "vendedora", "estudante", "empresario",
    "empresaria", "designer", "advogado", "advogada", "contador", "contadora",
    "programador", "programadora", "gerente", "marketing", "arquiteto", "arquiteta",
    "psicologo", "psicologa", "fisioterapeuta", "dentista", "enfermeiro", "enfermeira",
    "farmaceutico", "farmaceutica", "jornalista", "publicitario", "publicitaria",
    "cozinheiro", "cozinheira", "eletricista", "mecanico", "mecanica", "motorista",
    "administrador", "administradora", "economista", "veterinario", "veterinaria",
    "fotografo", "fotografa", "artista", "pedreiro", "pedreira", "costureiro",
    "costureira", "barbeiro", "barbeira", "cabeleireiro", "cabeleireira", "manicure",
    "pedicure", "maquiador", "maquiadora", "nutricionista", "personal trainer", "ator",
    "atriz", "musico", "musicista", "escritor", "escritora", "editor", "editora",
    "tradutor", "tradutora", "interprete", "bibliotecario", "bibliotecaria",
    "historiador", "historiadora", "geografo", "geografa", "biologo", "biologa",
    "quimico", "quimica", "fisico", "fisica", "matematico", "matematica",
    "estatistico", "estatistica", "analista de dados", "cientista de dados",
    "desenvolvedor", "desenvolvedora", "analista de sistemas", "tecnico de ti",
    "tecnica de ti", "engenheiro de software", "engenheira de software",
    "arquiteto de software", "arquiteta de software", "consultor", "consultora",
    "auditor", "auditora", "financeiro", "bancario", "bancaria", "corretor de imoveis",
    "corretora de imoveis", "corretor de seguros", "corretora de seguros",
    "agente de viagens", "piloto", "comissario de bordo", "comissaria de bordo",
    "marinheiro", "marinheira", "policial", "bombeiro", "bombeira", "seguranca",
    "jardineiro", "jardineira", "paisagista", "agronomo", "agronoma", "zootecnista",
    "ambientalista", "sociologo", "sociologa", "antropologo", "antropologa",
    "assistente social", "terapeuta ocupacional", "fonoaudiologo", "fonoaudiologa",
    "oftalmologista", "dermatologista", "cardiologista", "neurologista", "ortopedista",
    "pediatra", "psiquiatra", "chef de cozinha", "garcom", "garconete", "recepcionista",
    "atendente", "operador de caixa", "operadora de caixa", "estoquista", "logistico",
    "marceneiro", "marceneira", "serralheiro", "serralheira", "pintor", "pintora"
  ];

  const cursosFixos = [
    "encontro com deus", "curso de batismo", "maturidade no espirito", "escola de lideres",
  ];

  let mensagemSemCursos = mensagemSemTelefone;
  for (let i = 0; i < partes.length; i++) {
    const parte = partes[i];
    const parteNormalizada = parte
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .toLowerCase()
      .trim();

    const cursoMatch = parteNormalizada.match(/(?:fez o curso|curso|fez)\s+([^,]+)/i);
    if (cursoMatch) {
      let cursoExtraido = cursoMatch[1].trim();
      cursoExtraido = cursoExtraido.replace(/^(de\s+)/, "").trim();
      
      if (parteNormalizada.includes("encontro com deus")) cursos.encontroComDeus = true;
      else if (parteNormalizada.includes("curso de batismo")) cursos.cursoDeBatismo = true;
      else if (parteNormalizada.includes("maturidade no espirito")) cursos.maturidadeNoEspirito = true;
      else if (parteNormalizada.includes("escola de lideres")) cursos.escolaDeLideres = true;
      else if (!cursosFixos.some(curso => cursoExtraido.includes(curso))) {
        const cursoFormatado = cursoExtraido
          .split(" e ")
          .map(c => c.trim())
          .map(c => c.split(" ").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(" "))
          .join(" e ");
        if (!cursos.outros.includes(cursoFormatado)) {
          cursos.outros.push(cursoFormatado);
        }
      }
      mensagemSemCursos = mensagemSemCursos.replace(parte, "").trim();
    }
  }

  partes = mensagemSemCursos.split(",").map(parte => parte.trim()).filter(parte => parte.length > 0);
  console.log("üìã Partes ap√≥s remover cursos:", partes);

  for (const parte of partes) {
    const parteNormalizada = parte
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .toLowerCase()
      .trim();

    const palavras = parteNormalizada.split(/\s+/);

    if (parteNormalizada.includes(nome.toLowerCase()) && parte === partes[0]) {
      continue;
    }

    const idadeMatch = parteNormalizada.match(/(\d+)\s*anos/);
    if (idadeMatch) idade = parseInt(idadeMatch[1]);

    let funcoesEncontradas = [];
    for (let i = 0; i < palavras.length; i++) {
      for (let j = i + 1; j <= palavras.length; j++) {
        const trecho = palavras.slice(i, j).join(" ");
        if (funcoesFixas.includes(trecho)) {
          const funcaoFormatada = trecho
            .split(" ")
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(" ");
          if (!funcoesEncontradas.includes(funcaoFormatada)) {
            funcoesEncontradas.push(funcaoFormatada);
          }
        }
      }
    }

    if (parteNormalizada.includes("membro da igreja") && !funcoesEncontradas.includes("Membro")) {
      funcoesEncontradas.push("Membro");
    }
    if (parteNormalizada.includes("trabalha na cantina da igreja") && !funcoesEncontradas.includes("Cantina")) {
      funcoesEncontradas.push("Cantina");
    }
    if (parteNormalizada.includes("servicos sociais da igreja") && !funcoesEncontradas.includes("Servicos Sociais")) {
      funcoesEncontradas.push("Servicos Sociais");
    }
    if (parteNormalizada.includes("departamento kids") && !funcoesEncontradas.includes("Departamento Kids")) {
      funcoesEncontradas.push("Departamento Kids");
    }

    funcoesEncontradas.forEach(f => {
      if (!funcao.includes(f)) {
        funcao.push(f);
      }
    });

    let profissaoEncontrada = null;
    for (let i = 0; i < palavras.length; i++) {
      for (let j = i + 1; j <= palavras.length; j++) {
        const trecho = palavras.slice(i, j).join(" ");
        if (profissoesFixas.includes(trecho)) {
          profissaoEncontrada = trecho;
          break;
        }
      }
      if (profissaoEncontrada) break;
    }

    if (!profissaoEncontrada && (parteNormalizada.includes("profissao") || parteNormalizada.includes("trabalha como") || parteNormalizada.includes("profissional em"))) {
      const indiceContexto = palavras.findIndex(p => p.includes("profissao") || p.includes("trabalha") || p.includes("profissional"));
      let textoExtraido = palavras.slice(indiceContexto + 1).join(" ").trim();
      if (parteNormalizada.includes("profissional em")) {
        textoExtraido = textoExtraido.replace(/^em\s+/, "").trim();
      }

      profissaoEncontrada = profissoesFixas.find(p => textoExtraido.includes(p)) || textoExtraido;

      if (!profissoesFixas.includes(profissaoEncontrada)) {
        try {
          console.log(`üîç Chamando GPT-3.5-Turbo para classificar: "${textoExtraido}"`);
          const prompt = `
            Voc√™ √© um assistente que ajuda a classificar textos em dois campos: "fun√ß√£o na igreja" ou "profiss√£o". 
            Fun√ß√µes na igreja s√£o pap√©is ou atividades desempenhados dentro de uma organiza√ß√£o religiosa, como "pastor", "m√∫sico", "l√≠der de jovens", "t√©cnico de som", etc.
            Profiss√µes s√£o ocupa√ß√µes profissionais, como "m√©dico", "professor", "aut√¥nomo", "designer", etc.
            
            Dado o texto: "${textoExtraido}"
            
            1. Classifique se √© uma "fun√ß√£o na igreja" ou "profiss√£o".
            2. Retorne o texto formatado com cada palavra capitalizada (ex.: "t√©cnico de som" -> "T√©cnico de Som").
            
            Responda no formato:
            {
              "tipo": "funcao" ou "profissao",
              "valor": "Texto Formatado"
            }
          `;

          const response = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [{ role: "user", content: prompt }],
            max_tokens: 100,
            temperature: 0.3,
          });

          console.log("üì° Resposta do GPT-3.5-Turbo:", response.choices[0].message.content);
          const resultado = JSON.parse(response.choices[0].message.content);

          if (resultado.tipo === "funcao") {
            let funcaoExtraida = resultado.valor
              .split(" e ")
              .map(f => f.trim())
              .filter(f => f.length > 0);
            
            funcaoExtraida.forEach(f => {
              if (!funcao.includes(f)) {
                funcao.push(f);
              }
            });
          } else if (resultado.tipo === "profissao") {
            profissao = resultado.valor;
          }
        } catch (error) {
          console.error("‚ö†Ô∏è Erro ao chamar GPT-3.5-Turbo:", error.message);
          profissao = textoExtraido
            .split(" ")
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(" ");
          console.log(`üîÑ Fallback manual para profiss√£o: "${profissao}"`);
        }
      } else {
        profissao = profissaoEncontrada
          .split(" ")
          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
          .join(" ");
      }
    } else if (profissaoEncontrada) {
      profissao = profissaoEncontrada
        .split(" ")
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(" ");
    }

    if (parteNormalizada.includes("casado") || parteNormalizada.includes("casada")) estadoCivil = "Casado";
    else if (parteNormalizada.includes("solteiro") || parteNormalizada.includes("solteira")) estadoCivil = "Solteiro";

    if (parteNormalizada.includes("dizimista")) dizimista = true;
    else if (parteNormalizada.includes("nao e dizimista")) dizimista = false;
    if (parteNormalizada.includes("batizado") || parteNormalizada.includes("batizada")) batizado = true;
  }

  funcao = funcao.length > 0 ? funcao.join(" e ") : "";
  cursos.outros = cursos.outros.length > 0 ? cursos.outros.join(" e ") : "";

  // --- MODIFICA√á√ÉO FIRESTORE ---
  // Salvar no Firestore na subcole√ß√£o correta da igreja
  // Gera um ID autom√°tico para o novo membro
  const membroRef = db.collection("igrejas").doc(igrejaId).collection("membros").doc(); 
  await membroRef.set({
    nome,
    telefone: telefoneMembro,
    idade,
    funcao,
    profissao,
    estadoCivil,
    dizimista,
    batizado,
    cursos,
    // N√£o precisa mais do igrejaId aqui, pois j√° est√° no caminho do documento
    dataCadastro: FieldValue.serverTimestamp(),
  });
  // --- FIM MODIFICA√á√ÉO FIRESTORE ---

  // Montar resposta
  return `
üôå Membro cadastrado com sucesso!

üìã Nome: ${nome}
üì± Telefone: ${telefoneMembro === "0" ? "N√£o informado" : telefoneMembro}
üéÇ Idade: ${idade > 0 ? idade : "N√£o informado"}
üìå Fun√ß√£o: ${funcao || "N√£o informado"}
üíº Profiss√£o: ${profissao || "N√£o informado"}
üíç Estado Civil: ${estadoCivil || "N√£o informado"}
üí∞ Dizimista: ${dizimista ? "‚úÖ Sim" : "‚ùå N√£o"}
üïäÔ∏è Batizado: ${batizado ? "‚úÖ Sim" : "‚ùå N√£o"}
üéì Cursos:
  ‚Ä¢ Encontro com Deus: ${cursos.encontroComDeus ? "‚úÖ" : "‚ùå"}
  ‚Ä¢ Curso de Batismo: ${cursos.cursoDeBatismo ? "‚úÖ" : "‚ùå"}
  ‚Ä¢ Maturidade no Esp√≠rito: ${cursos.maturidadeNoEspirito ? "‚úÖ" : "‚ùå"}
  ‚Ä¢ Escola de L√≠deres: ${cursos.escolaDeLideres ? "‚úÖ" : "‚ùå"}
  ‚Ä¢ Outros: ${cursos.outros || "Nenhum"}

üíæ J√° est√° salvo no sistema!
`;
}

// SUGEST√ÉO DE ALTERA√á√ÉO PARA A FUN√á√ÉO registrarTransacaoFinanceira
// FOCO: Salvar categoriaPrincipal e subCategoria no Firestore.
// A l√≥gica de retorno da mensagem para o WhatsApp ser√° minimamente ajustada para incluir as novas categorias, se poss√≠vel, ou mantida para evitar quebras.

async function registrarTransacaoFinanceira(mensagem, telefone, tipo, categoriaPrincipal, subCategoria, categoriaLegada, valor, nomeMembro, igrejaId, descricao) {
  // A assinatura da fun√ß√£o foi alterada para receber categoriaPrincipal, subCategoria e categoriaLegada (que era a antiga "categoria")
  console.log(`üè¶ Registrando transa√ß√£o para Igreja ID: ${igrejaId}`);
  console.log(`  -> Tipo: ${tipo}, Categoria Principal: ${categoriaPrincipal}, Subcategoria: ${subCategoria}, Categoria Legada: ${categoriaLegada}, Valor: ${valor}`);

  const dataAtual = new Date();
  const timestampAtual = FieldValue.serverTimestamp(); // Usar FieldValue para consist√™ncia

  // Normaliza o telefone antes de salvar (l√≥gica original mantida)
  const telefoneNormalizado = normalizarTelefoneBrasil(telefone);

  // A fun√ß√£o classificarMensagem j√° foi chamada antes, aqui recebemos os resultados.
  // N√£o precisamos mais chamar classificarMensagem aqui dentro.
  // const classificacao = classificarMensagem(mensagem); // REMOVIDO
  // console.log(`  -> Classifica√ß√£o interna (REMOVIDO): ${JSON.stringify(classificacao)}`);

  // --- PROCESSAMENTO DE TRANSA√á√ÉO SIMPLES (L√≥gica original mantida com ajustes para novas categorias) ---
  console.log("  -> Processando como transa√ß√£o simples.");
  const identificador = gerarIdentificador(); // Garanta que gerarIdentificador() exista

  const transacao = {
    identificador,
    descricao: descricao || mensagem, 
    valor: valor || 0, 
    tipo, // 'entrada' ou 'saida'
    
    // *** NOVOS CAMPOS DE CATEGORIA ***
    categoriaPrincipal: categoriaPrincipal || (tipo === "entrada" ? "Entradas" : "Despesas"), // Default se n√£o vier
    subCategoria: subCategoria || (tipo === "entrada" ? "Entrada Diversa" : "Despesa Diversa"), // Default se n√£o vier
    categoria: categoriaLegada || (tipo === "entrada" ? "Entrada Diversa" : "Despesa Diversa"), // Campo legado, pode ser a subCategoria ou um default
    // *******************************

    membro: nomeMembro?.nome || "N√£o informado", 
    membroId: nomeMembro?.id || null, 
    telefone: telefoneNormalizado, 
    data: timestampAtual, 
    pago: true, 
  };

  try {
    const transacaoRef = db.collection("igrejas").doc(igrejaId).collection("transacoes").doc(identificador);
    await transacaoRef.set(transacao);
    console.log(`    -> Transa√ß√£o ${identificador} salva em /igrejas/${igrejaId}/transacoes com categorias: P: ${transacao.categoriaPrincipal}, S: ${transacao.subCategoria}`);

    // --- NOVO BLOCO PARA REGISTRAR D√çZIMO INDIVIDUAL NO MEMBRO ---
    if (transacao.tipo === "entrada" && 
        (transacao.subCategoria === "D√≠zimo" || transacao.categoriaLegada === "D√≠zimo") && 
        transacao.membroId && 
        transacao.membroId !== "N√£o informado") {
      
      try {
        const dizimoMembroRef = db.collection("igrejas").doc(igrejaId)
                                  .collection("membros").doc(transacao.membroId)
                                  .collection("dizimos").doc(identificador); // Usar o mesmo ID da transa√ß√£o geral
        
        // Voc√™ pode querer salvar o mesmo objeto 'transacao' ou um objeto mais simples
        // Por exemplo, um objeto espec√≠fico para o hist√≥rico de d√≠zimos do membro:
        const dizimoParaMembro = {
          idTransacaoOriginal: identificador,
          valor: transacao.valor,
          data: transacao.data, // ou dataAtual se preferir a data do processamento
          descricao: transacao.descricao, // ou uma descri√ß√£o mais espec√≠fica para o d√≠zimo
          registradoPor: telefoneNormalizado // Telefone de quem enviou o comando
        };

        await dizimoMembroRef.set(dizimoParaMembro);
        console.log(`    -> D√≠zimo individual ${identificador} tamb√©m salvo para membro ${transacao.membroId} em sua subcole√ß√£o 'dizimos'.`);
      } catch (errorDizimoMembro) {
        console.error(`‚ùå Erro ao tentar salvar d√≠zimo individual na subcole√ß√£o do membro ${transacao.membroId}:`, errorDizimoMembro);
        // N√£o lan√ßar erro aqui para n√£o impedir a resposta da transa√ß√£o principal,
        // mas √© importante logar essa falha espec√≠fica.
      }
    }
    // --- FIM DO NOVO BLOCO ---

    // Monta a resposta para o WhatsApp
    const tipoLabel = tipo === "entrada" ? "üí∏ Receita" : "üìâ Despesa";
    const valorFormatado = (valor || 0).toLocaleString("pt-BR", { style: "currency", currency: "BRL" });
    const dataFormatada = dataAtual.toLocaleDateString("pt-BR");

    // Ajuste na mensagem de retorno para incluir as novas categorias de forma simples
    let categoriaExibida = transacao.subCategoria;
    if (transacao.categoriaPrincipal && transacao.categoriaPrincipal !== "Entradas" && transacao.categoriaPrincipal !== "Despesas") {
        // Para despesas, podemos mostrar Principal > Subcategoria se a principal for espec√≠fica
        categoriaExibida = `${transacao.categoriaPrincipal} > ${transacao.subCategoria}`;
    } else if (tipo === "entrada" && transacao.subCategoria === "D√≠zimo" && nomeMembro?.nome && nomeMembro.nome !== "N√£o informado") {
        // Para d√≠zimo, a descri√ß√£o j√° costuma ter o nome, ent√£o a categoria pode ser s√≥ "D√≠zimo"
        categoriaExibida = "D√≠zimo";
    } else if (tipo === "entrada" && transacao.subCategoria === "Oferta") {
        categoriaExibida = "Oferta";
    }

    return `
${tipoLabel} registrada com sucesso!
üë§ Membro: ${transacao.membro}
üìã Descri√ß√£o: ${transacao.descricao}
üí∞ Valor: ${valorFormatado}
‚û°Ô∏è Tipo: ${tipo}
üìÇ Categoria: ${categoriaExibida} 
üìÖ Data: ${dataFormatada}
üóÇÔ∏è Salvo no sistema!
    `;

  } catch (error) {
    console.error(`‚ùå Erro ao registrar transa√ß√£o simples ${identificador} para igreja ${igrejaId}:`, error);
    throw new Error("Falha ao salvar a transa√ß√£o no banco de dados."); 
  }
}

// Fun√ß√£o para processar d√≠zimos (COM BUSCA DE MEMBRO INTEGRADA)
async function processarDizimos(mensagem, igrejaId) {
  console.log(`[ProcessarDizimosDebug] Iniciando processamento de m√∫ltiplos d√≠zimos para Igreja ID: ${igrejaId}`);
  console.log(`[ProcessarDizimosDebug] Mensagem recebida: "${mensagem}"`);

  const linhas = mensagem.split("\n");
  const dizimosParaRetorno = [];

  if (linhas.length === 0) {
    console.warn("[ProcessarDizimosDebug] Mensagem vazia ou sem linhas.");
    return dizimosParaRetorno; // Retorna array vazio se n√£o houver linhas
  }

  const primeiraLinhaOriginal = linhas[0].trim();
  const primeiraLinhaNormalizada = primeiraLinhaOriginal.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  console.log(`[ProcessarDizimosDebug] Primeira linha original: "${primeiraLinhaOriginal}", Normalizada: "${primeiraLinhaNormalizada}"`);

  if (!(primeiraLinhaNormalizada.startsWith("dizimos") || primeiraLinhaNormalizada.startsWith("dizimo"))) {
    console.warn("[ProcessarDizimosDebug] ‚ö†Ô∏è Mensagem n√£o iniciou com varia√ß√µes de 'D√≠zimos'. Nenhum d√≠zimo m√∫ltiplo processado.");
    return dizimosParaRetorno; // Retorna array vazio se n√£o for um comando de m√∫ltiplos d√≠zimos
  }

  console.log(`[ProcessarDizimosDebug] Primeira linha reconhecida como in√≠cio de m√∫ltiplos d√≠zimos.`);

  // Regex para capturar: (Nome Completo) (Valor) (Modo de Pagamento)
  // Exemplo: "Fulano de Tal 123,45 Dinheiro"
  // Captura: 1: "Fulano de Tal", 2: "123,45", 3: "Dinheiro"
  const regexLinhaDizimo = /^(.*?)\s+([\d,.]+)\s+(.+)$/;

  for (let i = 1; i < linhas.length; i++) {
    const linha = linhas[i].trim();
    console.log(`[ProcessarDizimosDebug] Processando linha ${i}: "${linha}"`);

    if (!linha) {
      console.log(`[ProcessarDizimosDebug] Linha ${i} est√° vazia, pulando.`);
      continue;
    }

    const match = linha.match(regexLinhaDizimo);

    if (match) {
      let nomeExtraidoDaLinha = match[1].trim();
      let valorStr = match[2].replace(",", "."); // Substitui v√≠rgula por ponto para parseFloat
      let modoPagamento = match[3].toLowerCase().trim();
      let valor = parseFloat(valorStr);

      console.log(`[ProcessarDizimosDebug] Dados extra√≠dos da linha ${i}: Nome='${nomeExtraidoDaLinha}', ValorStr='${valorStr}', Modo='${modoPagamento}', ValorNum=${valor}`);

      if (isNaN(valor)) {
        console.warn(`[ProcessarDizimosDebug] Valor inv√°lido na linha ${i}: "${valorStr}". Pulando esta linha.`);
        continue;
      }
      if (!nomeExtraidoDaLinha) {
        console.warn(`[ProcessarDizimosDebug] Nome n√£o extra√≠do na linha ${i}. Pulando esta linha.`);
        continue;
      }
      if (!modoPagamento) {
        console.warn(`[ProcessarDizimosDebug] Modo de pagamento n√£o extra√≠do na linha ${i}. Pulando esta linha.`);
        continue;
      }

      // Normaliza√ß√£o adicional do modo de pagamento (exemplo)
      if (['cartao', 'c.c.', 'credito', 'd√©bito'].includes(modoPagamento)) {
        modoPagamento = 'cartao';
      } else if (['dinheiro', 'cash'].includes(modoPagamento)) {
        modoPagamento = 'dinheiro';
      } // Adicionar mais normaliza√ß√µes conforme necess√°rio

      let nomeFinalParaRegistro = nomeExtraidoDaLinha;
      let membroIdParaRegistro = nomeExtraidoDaLinha; // Padr√£o: usa nome extra√≠do como ID
      let membroEncontradoInfo = "(Ser√° criado/usado com nome da mensagem)";

      try {
        console.log(`[ProcessarDizimosDebug] Buscando membro existente para: '${nomeExtraidoDaLinha}' na igreja ${igrejaId}`);
        const membroDetectado = await detectarNomeMembro(nomeExtraidoDaLinha, igrejaId);

        if (membroDetectado && membroDetectado.id) {
          nomeFinalParaRegistro = membroDetectado.nome;
          membroIdParaRegistro = membroDetectado.id;
          membroEncontradoInfo = `(Encontrado no DB: '${nomeFinalParaRegistro}', ID: ${membroIdParaRegistro})`;
          console.log(`[ProcessarDizimosDebug] Membro encontrado no DB: '${nomeFinalParaRegistro}' (ID: ${membroIdParaRegistro}). Usando este para o registro.`);
        } else {
          console.log(`[ProcessarDizimosDebug] Membro '${nomeExtraidoDaLinha}' n√£o encontrado no DB. Ser√° criado/usado com o nome extra√≠do como ID.`);
        }

        const membroRef = db.collection("igrejas").doc(igrejaId).collection("membros").doc(membroIdParaRegistro);
        await membroRef.set(
          {
            nome: nomeFinalParaRegistro,
            ultimaAtualizacao: FieldValue.serverTimestamp(),
            dizimista: true
          },
          { merge: true }
        );
        console.log(`[ProcessarDizimosDebug] Membro '${nomeFinalParaRegistro}' (ID: ${membroIdParaRegistro}) atualizado/criado em /igrejas/${igrejaId}/membros`);

        const dizimoDocRef = membroRef.collection("dizimos").doc();
        await dizimoDocRef.set({
          valor,
          modoPagamento,
          data: FieldValue.serverTimestamp(),
          categoria: "D√≠zimo",
          pago: true,
        });
        console.log(`[ProcessarDizimosDebug] D√≠zimo de R$${valor} adicionado para '${nomeFinalParaRegistro}' em /igrejas/${igrejaId}/membros/${membroIdParaRegistro}/dizimos`);

        const transacaoRef = db.collection("igrejas").doc(igrejaId).collection("transacoes").doc();
        await transacaoRef.set({
          categoria: "D√≠zimo",
          data: FieldValue.serverTimestamp(),
          descricao: `D√≠zimo: ${nomeFinalParaRegistro} ${valor.toFixed(2).replace(".", ",")} ${modoPagamento}`,
          identificador: transacaoRef.id,
          // Ajuste aqui: Salvar o nome do membro no campo esperado pelo dashboard
          membroNome: nomeFinalParaRegistro, 
          // Manter o campo membroId, pois ele √© √∫til para referenciar o documento do membro
          membroId: membroIdParaRegistro, 
          // Adicionar o campo formaPagamento esperado pelo dashboard
          formaPagamento: modoPagamento, 
          pago: true,
          tipo: "entrada",
          valor,
        });
        console.log(`[ProcessarDizimosDebug] Transa√ß√£o de D√≠zimo adicionada para '${nomeFinalParaRegistro}' em /igrejas/${igrejaId}/transacoes com membroNome e formaPagamento corretos`);
        
        dizimosParaRetorno.push({
          nomeMembro: nomeFinalParaRegistro,
          valor: valor,
          modoPagamento: modoPagamento
        });

      } catch (error) {
          console.error(`[ProcessarDizimosDebug] ‚ùå Erro ao processar d√≠zimo para '${nomeExtraidoDaLinha}' ${membroEncontradoInfo} na igreja ${igrejaId}:`, error);
      }
    } else {
      console.warn(`[ProcessarDizimosDebug] Linha ignorada (formato inv√°lido): ${linha}`);
    }
  }

  console.log(`[ProcessarDizimosDebug] ‚úÖ ${dizimosParaRetorno.length} d√≠zimos m√∫ltiplos efetivamente processados e preparados para retorno para Igreja ID: ${igrejaId}`);
  return dizimosParaRetorno;
}
  
// ========================================================================
// FUN√á√ïES AUXILIARES (DEFINI√á√ïES ADICIONADAS AQUI)
// ========================================================================

// Fun√ß√£o auxiliar para extrair dados da requisi√ß√£o (CORRIGIDA PARA req.body.text.message)
function extractMessageAndPhone(req) {
  console.log("üîç Corpo da requisi√ß√£o recebida (req.body):", JSON.stringify(req.body, null, 2));

  let mensagem = null;
  let telefone = null;
  let audioData = null; 
  let urlAudio = null;
  let imagemData = null; 
  let urlImagem = null;
  let fromMe = false;
  let connectedPhoneRaw = null; 

  if (req.body) {
    // ** CORRE√á√ÉO: Acessar req.body.text.message para pegar a string **
    if (req.body.text && typeof req.body.text.message === 'string') {
      mensagem = req.body.text.message;
    } else {
      // Fallback para outras poss√≠veis estruturas (menos prov√°vel agora)
      mensagem = req.body.message || req.body.body || null;
    }
    console.log(`Valor extra√≠do para mensagem: ${mensagem}`); // Log atualizado

    telefone = req.body.phone || req.body.sender || req.body.from || null;
    fromMe = req.body.fromMe === true;
    connectedPhoneRaw = req.body.connectedPhone || req.body.instanceId || null;

    // M√≠dia (l√≥gica mantida)
    let mediaInfo = req.body.media || (req.body.message && req.body.message.media) || null;
    if (!mediaInfo && (req.body.type === "image" || req.body.type === "audio")) {
        mediaInfo = req.body; 
    }
    if (mediaInfo) {
      const mediaType = mediaInfo.type || mediaInfo.mimetype;
      const mediaUrl = mediaInfo.url || mediaInfo.downloadUrl || mediaInfo.body;
      if (mediaType?.includes("audio")) {
        urlAudio = mediaUrl;
        console.log(`Extra√≠do URL de √Åudio: ${urlAudio}`);
        if (!mensagem) mensagem = `[√Åudio recebido: ${urlAudio}]`; 
      } else if (mediaType?.includes("image")) {
        urlImagem = mediaUrl;
        console.log(`Extra√≠do URL de Imagem: ${urlImagem}`);
        if (!mensagem) mensagem = `[Imagem recebida: ${urlImagem}]`;
      }
    }

    // Normaliza√ß√£o do telefone do REMETENTE usando a fun√ß√£o completa
if (telefone) {
  let telOriginal = telefone; // Guardar o original para o log, se quiser
  telefone = normalizarTelefoneBrasil(telOriginal); // Chama a fun√ß√£o importada!
  console.log(`Telefone remetente normalizado (usando normalizarTelefoneBrasil) de ${telOriginal} para ${telefone}`);
} else {
    console.warn("Telefone do remetente n√£o encontrado no payload!"); // ESTE ELSE PERMANECE
}

    if (!connectedPhoneRaw) {
        console.warn("Telefone conectado (connectedPhone/instanceId) n√£o encontrado no payload!");
    }
  }

  console.log("Dados extra√≠dos por extractMessageAndPhone ->", {
    mensagem,
    telefone,
    urlAudio,
    urlImagem,
    fromMe,
    connectedPhoneRaw
  });

  return {
    mensagem, // Agora deve ser a string correta
    telefone, 
    audioData,
    urlAudio,
    imagemData,
    urlImagem,
    fromMe,
    connectedPhoneRaw 
  };
}

// SUGEST√ÉO DE ALTERA√á√ÉO PARA A FUN√á√ÉO classificarMensagem
// FOCO: Aprimorar a categoriza√ß√£o de DESPESAS.
// As demais l√≥gicas (D√≠zimos M√∫ltiplos, Relat√≥rio, Cadastro, Entradas) permanecem como no original.

// ========================================================================
// MAPA DE CATEGORIAS DE DESPESAS (Baseado em categorias_despesas.md)
// ========================================================================
const mapaCategoriasDespesas = {
  "Despesas Operacionais e Administrativas": {
    "Aluguel do Templo/Sal√£o": ["aluguel do templo", "aluguel do salao", "aluguel igreja"],
    "Contas de Consumo - √Ågua": ["conta de agua", "agua"],
    "Contas de Consumo - Luz": ["conta de luz", "luz", "energia eletrica", "energia"],
    "Contas de Consumo - G√°s": ["conta de gas", "gas", "botijao de gas"],
    "Contas de Consumo - Internet": ["conta de internet", "internet", "provedor de internet"],
    "Contas de Consumo - Telefone": ["conta de telefone", "telefone fixo", "telefone movel", "celular da igreja"],
    "Materiais de Escrit√≥rio e Papelaria": ["material de escritorio", "papelaria", "caneta", "papel", "toner", "cartucho"],
    "Software e Assinaturas": ["software", "assinatura de sistema", "sistema de gestao", "contabilidade online", "streaming"],
    "Servi√ßos de Contabilidade e Advocacia": ["contador", "contabilidade", "advogado", "servi√ßos juridicos", "honorarios"],
    "Seguros": ["seguro predial", "seguro da igreja", "seguro responsabilidade"],
    "Manuten√ß√£o e Reparos Prediais": ["manutencao predial", "reparo eletrico", "reparo hidraulico", "pintura igreja", "reforma igreja"],
    "Limpeza e Conserva√ß√£o": ["material de limpeza", "produtos de limpeza", "faxina", "limpeza terceirizada"],
    "Seguran√ßa": ["seguranca", "alarme", "monitoramento", "vigilancia"],
    "Transporte e Deslocamento": ["combustivel", "passagem", "manutencao veiculo", "transporte pastoral"],
    "Taxas e Impostos": ["iptu", "taxa municipal", "imposto"],
  },
  "Despesas com Pessoal e Lideran√ßa": {
    "Sal√°rio Pastoral (Prebenda, C√¥ngrua)": ["salario pastoral", "prebenda", "congrua", "pagamento pastor"],
    "Ajudas de Custo para Pastores e L√≠deres": ["ajuda de custo pastor", "auxilio moradia pastor", "auxilio alimentacao pastor"],
    "Sal√°rios de Funcion√°rios": ["salario funcionario", "pagamento secretaria", "pagamento limpeza", "pagamento tecnico de som"],
    "Encargos Sociais e Trabalhistas": ["inss", "fgts", "decimo terceiro", "ferias funcionario"],
    "Benef√≠cios": ["plano de saude funcionario", "vale alimentacao", "vale transporte funcionario"],
    "Treinamento e Desenvolvimento de L√≠deres e Volunt√°rios": ["treinamento de lideres", "curso para voluntarios", "capacitacao ministerial"],
    "Despesas com Viagens Mission√°rias e Ministeriais de L√≠deres": ["viagem missionaria", "viagem ministerial", "passagem lider"],
  },
  "Despesas com Minist√©rios e Departamentos": {
    "Departamento Infantil (Kids)": ["material kids", "lanche criancas", "ebd infantil", "departamento infantil"],
    "Departamento de Jovens e Adolescentes": ["evento de jovens", "acampamento de jovens", "material jovens", "departamento de jovens"],
    "Departamento de Casais": ["encontro de casais", "curso para casais", "ministerio de casais"],
    "Minist√©rio de Louvor e Adora√ß√£o": ["instrumento musical", "equipamento de som", "cabo", "palheta", "cordas", "uniforme louvor", "microfone", "sonoplastia"],
    "Minist√©rio de Ensino (Escola B√≠blica Dominical, cursos)": ["material ebd", "livro ebd", "apostila curso", "escola biblica"],
    "Minist√©rio de A√ß√£o Social e Evangelismo": ["doacao cesta basica", "evento evangelistico", "material de evangelismo", "acao social"],
    "Minist√©rio de Comunica√ß√£o": ["equipamento de filmagem", "software de edicao video", "transmissao online culto", "design grafico igreja", "comunicacao"],
    "Outros Minist√©rios": ["ministerio de mulheres", "ministerio de homens", "encontro de homens", "encontro de mulheres"],
  },
  "Despesas com Eventos e Celebra√ß√µes": {
    "Eventos Especiais (confer√™ncias, semin√°rios, congressos)": ["conferencia", "seminario", "congresso", "evento especial", "preletor convidado", "musico convidado"],
    "Celebra√ß√µes (P√°scoa, Natal, Anivers√°rio da Igreja)": ["decoracao de pascoa", "decoracao de natal", "aniversario da igreja", "cantata de natal"],
    "Batismos e Ceias": ["material batismo", "tunica batismo", "pao e suco ceia", "santa ceia"],
  },
  "Despesas Financeiras e Banc√°rias": {
    "Tarifas banc√°rias": ["tarifa bancaria", "manutencao de conta", "ted", "doc", "taxa boleto"],
    "Juros e multas": ["juros boleto", "multa atraso"],
    "Taxas de m√°quinas de cart√£o": ["taxa maquininha", "taxa cartao"],
  },
  "Outras Despesas": {
    "Aquisi√ß√£o de Imobilizado": ["compra de movel", "compra de equipamento", "compra de veiculo", "imobilizado"],
    "Despesas com Hospitalidade": ["recepcao de convidados", "cafe para visitantes", "hospitalidade"],
    "Flores e Decora√ß√£o do Templo": ["flores igreja", "decoracao templo", "arranjo floral"],
    "Contribui√ß√µes para Conven√ß√µes ou Associa√ß√µes Denominacionais": ["contribuicao convencao", "taxa associacao"],
    "Projetos Mission√°rios": ["oferta missionaria", "sustento missionario", "projeto missoes"],
    "Fundo de Reserva ou Conting√™ncia": ["fundo de reserva", "contingencia"],
  }
};

// Fun√ß√£o auxiliar para encontrar categoria de despesa (ser√° usada dentro de classificarMensagem)
function encontrarCategoriaDespesaDetalhada(mensagem) {
  const msgLower = mensagem.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, ""); // Normaliza e remove acentos
  for (const catPrincipal in mapaCategoriasDespesas) {
    for (const subCat in mapaCategoriasDespesas[catPrincipal]) {
      const palavrasChave = mapaCategoriasDespesas[catPrincipal][subCat];
      if (palavrasChave.some(palavra => msgLower.includes(palavra.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "")))) {
        return { categoriaPrincipal: catPrincipal, subCategoria: subCat };
      }
    }
  }
  return { categoriaPrincipal: "Despesas", subCategoria: "Despesa Diversa" }; // Default se nenhuma espec√≠fica for encontrada
}


// ========================================================================
// FUN√á√ÉO DE CLASSIFICA√á√ÉO (PR√â-FILTRO - SUGEST√ÉO DE AJUSTE)
// ========================================================================
function classificarMensagemComLogs(mensagem) { // For√ßando o redeploy
  if (!mensagem || typeof mensagem !== 'string') {
    console.log("classificarMensagem: Mensagem inv√°lida ou n√£o √© string.");
    return { tipo: "outro" };
  }

  const msgLower = mensagem.toLowerCase().trim();
  const msgOriginal = mensagem.trim(); // Manter original para extra√ß√£o

  // --- PRIORIDADE 1: Verifica√ß√£o de D√≠zimos M√∫ltiplos (COM LOGS DETALHADOS PARA DEPURA√á√ÉO) ---
  const linhasDaMensagem = msgOriginal.split('\n');
  const primeiraLinhaOriginal = linhasDaMensagem[0].trim();
  let primeiraLinhaParaVerificacao = primeiraLinhaOriginal.toLowerCase();

  console.log(`[MultiDizimosDebug] Mensagem Original Recebida: "${msgOriginal}"`);
  console.log(`[MultiDizimosDebug] Linhas Detectadas (ap√≥s split '\n'): ${JSON.stringify(linhasDaMensagem)}`);
  console.log(`[MultiDizimosDebug] Primeira Linha (original trim): "${primeiraLinhaOriginal}"`);

  if (primeiraLinhaParaVerificacao.endsWith(":")) {
    primeiraLinhaParaVerificacao = primeiraLinhaParaVerificacao.slice(0, -1).trim();
  }
  console.log(`[MultiDizimosDebug] Primeira Linha (para verifica√ß√£o, lowercased, sem ':' final): "${primeiraLinhaParaVerificacao}"`);

  const palavrasChaveMultiplosDizimos = ["d√≠zimos", "dizimos", "d√≠zimo", "dizimo"];
  const isPalavraChaveMultiplos = palavrasChaveMultiplosDizimos.includes(primeiraLinhaParaVerificacao);
  console.log(`[MultiDizimosDebug] Primeira linha √© palavra-chave de m√∫ltiplos d√≠zimos? ${isPalavraChaveMultiplos}`);

  if (isPalavraChaveMultiplos) {
    const temLinhasDeDadosValidas = linhasDaMensagem.length > 1 && linhasDaMensagem.slice(1).some(linha => linha.trim() !== '');
    console.log(`[MultiDizimosDebug] Existem linhas de dados subsequentes v√°lidas? ${temLinhasDeDadosValidas}`);
    
    if (temLinhasDeDadosValidas) {
      console.log(`classificarMensagem: Detectado padr√£o de M√öLTIPLOS D√çZIMOS. Linha verificada: "${primeiraLinhaParaVerificacao}". M√∫ltiplas linhas de dados detectadas.`);
      return { tipo: "financeiro", subTipo: "multiplos_dizimos" };
    } else {
      console.log(`[MultiDizimosDebug] Palavra-chave de m√∫ltiplos d√≠zimos detectada, mas as linhas de dados subsequentes n√£o s√£o v√°lidas ou est√£o ausentes.`);
      // Neste ponto, a fun√ß√£o continuar√° para as pr√≥ximas verifica√ß√µes (relat√≥rio, financeiro √∫nico, etc.)
      // o que pode explicar o comportamento de processar como d√≠zimo √∫nico se a primeira linha de dados se encaixar nesse padr√£o.
    }
  }
  // --- Fim da Verifica√ß√£o de D√≠zimos M√∫ltiplos ---

  // --- Verifica√ß√£o de Relat√≥rio ---
  const palavrasRelatorio = ["relat√≥rio", "relatorio", "balan√ßo", "resumo financeiro", "extrato"];
  if (palavrasRelatorio.some(palavra => msgLower.includes(palavra))) {
    let periodo = "mes_atual";
    if (msgLower.includes("semana") || msgLower.includes("semanal")) periodo = "semana_atual";
    if (msgLower.includes("hoje") || msgLower.includes("dia")) periodo = "hoje";
    if (msgLower.includes("ultimos 7 dias")) periodo = "ultimos_7_dias";
    if (msgLower.includes("ultimos 15 dias")) periodo = "ultimos_15_dias";
    if (msgLower.includes("ultimos 30 dias")) periodo = "ultimos_30_dias";
    if (msgLower.includes("ano atual")) periodo = "ano_atual";
    console.log(`classificarMensagem: Detectado padr√£o de RELAT√ìRIO (${periodo}).`);
    return { tipo: "relatorio", periodo: periodo };
  }

  // --- Verifica√ß√£o Financeira √öNICA ---
const palavrasEntrada = ["oferta", "entrada", "doa√ß√£o", "doacao", "contribui√ß√£o", "contribuicao", "recebido", "recebi", "campanha"];
const palavrasSaida = ["saida", "sa√≠da", "despesa", "pagamento", "paguei", "compra", "conta"];
const palavrasDizimoUnico = ["d√≠zimo", "dizimo"]; // Renomeado para evitar confus√£o com a lista de m√∫ltiplos

const regexValorSimples = /([0-9]+(?:[.,][0-9]{1,2})?)/;
const matchValor = msgOriginal.match(regexValorSimples);
const valorExtraido = matchValor ? parseFloat((matchValor[1] || "0").replace(",", ".")) : null;

let tipoTransacao = null;
let categoriaPrincipalRetorno = null;
let subCategoriaRetorno = null;
let categoriaLegadaRetorno = "Diversos";

if (palavrasEntrada.some(palavra => msgLower.includes(palavra))) {
  tipoTransacao = "entrada";

  // As verifica√ß√µes espec√≠ficas devem vir primeiro, da mais espec√≠fica para a mais gen√©rica
  if (msgLower.includes("d√≠zimo") || msgLower.includes("dizimo")) {
    categoriaPrincipalRetorno = "Entradas";
    subCategoriaRetorno = "D√≠zimo";
    categoriaLegadaRetorno = "D√≠zimo";
  } else if (msgLower.includes("oferta")) {
    categoriaPrincipalRetorno = "Entradas";
    subCategoriaRetorno = "Oferta";
    categoriaLegadaRetorno = "Oferta";
  } else if (msgLower.includes("campanha")) {
    categoriaPrincipalRetorno = "Entradas";
    subCategoriaRetorno = "Campanha";
    categoriaLegadaRetorno = "Campanha";
  } else if (msgLower.includes("doa√ß√£o") || msgLower.includes("doacao")) {
    categoriaPrincipalRetorno = "Entradas";
    subCategoriaRetorno = "Doa√ß√£o";
    categoriaLegadaRetorno = "Doa√ß√£o";
  } else {
    categoriaPrincipalRetorno = "Entradas";
    subCategoriaRetorno = "Entrada Diversa";
    categoriaLegadaRetorno = "Entrada Diversa";
  }

} else if (palavrasSaida.some(palavra => msgLower.includes(palavra))) {
  tipoTransacao = "saida";

  const despesaCategorizada = encontrarCategoriaDespesaDetalhada(msgOriginal);
  categoriaPrincipalRetorno = despesaCategorizada.categoriaPrincipal;
  subCategoriaRetorno = despesaCategorizada.subCategoria;
  categoriaLegadaRetorno = despesaCategorizada.subCategoria;

} else if (msgLower.includes("d√≠zimo") || msgLower.includes("dizimo")) {
  tipoTransacao = "entrada";
  categoriaPrincipalRetorno = "Entradas";
  subCategoriaRetorno = "D√≠zimo";
  categoriaLegadaRetorno = "D√≠zimo";
}

if (tipoTransacao && valorExtraido !== null) {
  console.log(`classificarMensagem: Detectado padr√£o FINANCEIRO √öNICO. Tipo: ${tipoTransacao}, Categoria Principal: ${categoriaPrincipalRetorno}, Subcategoria: ${subCategoriaRetorno}, Valor: ${valorExtraido}.`);
  return {
    tipo: "financeiro",
    detalhes: {
      tipo: tipoTransacao,
      categoriaPrincipal: categoriaPrincipalRetorno,
      subCategoria: subCategoriaRetorno,
      categoria: categoriaLegadaRetorno,
      valor: valorExtraido
    }
  };
}

  // --- Verifica√ß√£o de Cadastro ---
  const palavrasCadastro = ["cadastro", "cadastrar", "novo membro", "ficha", "inscri√ß√£o"];
  const ehCadastroExplicito = palavrasCadastro.some(palavra => msgLower.includes(palavra));
  const temMultiplasVirgulas = (msgOriginal.match(/,/g) || []).length >= 3;
  const palavrasComunsCadastro = ["anos", "telefone", "casado", "casada", "solteiro", "solteira", "bairro", "rua", "numero", "profiss√£o", "empres√°rio", "curso", "dizimista", "batizado"];
  const temPalavrasComuns = palavrasComunsCadastro.some(palavra => msgLower.includes(palavra));
  const ehCadastroImplicito = temMultiplasVirgulas && temPalavrasComuns;

  if (ehCadastroExplicito || ehCadastroImplicito) {
    console.log(`classificarMensagem: Detectado padr√£o de CADASTRO (${ehCadastroExplicito ? 'expl√≠cito' : 'impl√≠cito'}).`);
    return { tipo: "cadastro" };
  }

  console.log("classificarMensagem: Nenhum padr√£o conhecido identificado. Classificando como 'outro'.");
  return { tipo: "outro" };
}

// Nota: A fun√ß√£o encontrarCategoriaDespesaDetalhada(msgOriginal) n√£o foi fornecida no trecho original,
// ent√£o ela √© mantida como uma chamada a uma fun√ß√£o que deve existir em outro lugar no seu c√≥digo.
// Se ela n√£o existir, a parte de categoriza√ß√£o de despesas falhar√°.

// ========================================================================
// FUN√á√ÉO PRINCIPAL DO WEBHOOK (C√ìDIGO FORNECIDO PELO USU√ÅRIO)
// ========================================================================

async function receberMensagemWhatsApp(req, res) {
  try {
    console.log("üöÄ Fun√ß√£o receberMensagemWhatsApp foi chamada!");

    // Valida√ß√£o inicial do corpo da requisi√ß√£o
    if (!req.body || typeof req.body !== "object") {
      console.error("‚ùå req.body inv√°lido:", req.body);
      return res.status(400).send({ error: "Corpo da requisi√ß√£o inv√°lido" });
    }

    // Extrair mensagem, telefone, √°udio e imagem usando a fun√ß√£o auxiliar (AGORA DEFINIDA ACIMA)
    const extractedData = extractMessageAndPhone(req);
    let mensagem = extractedData.mensagem;
    let formattedTelefone = extractedData.telefone; // Telefone J√Å normalizado pela extractMessageAndPhone
    const audioData = extractedData.audioData; // Mantido para compatibilidade, mas n√£o usado
    const urlAudio = extractedData.urlAudio;
    const imagemData = extractedData.imagemData; // Mantido para compatibilidade, mas n√£o usado
    const urlImagem = extractedData.urlImagem;
    const fromMe = extractedData.fromMe;
    const connectedPhoneRaw = extractedData.connectedPhoneRaw; // Pega o ID bruto da inst√¢ncia/igreja

    // Adiciona mais logs para depura√ß√£o (agora redundantes com o log final de extractMessageAndPhone, mas mantidos)
    console.log("üîç Valores extra√≠dos (ap√≥s chamada):");
    console.log("Mensagem:", mensagem);
    console.log("Telefone (Remetente Normalizado):", formattedTelefone);
    console.log("URL √Åudio:", urlAudio);
    console.log("URL Imagem:", urlImagem);
    console.log("fromMe:", fromMe);
    console.log("Connected Phone (Bruto):", connectedPhoneRaw);

    // --- IN√çCIO: Bloco para Obter e Normalizar igrejaId (connectedPhone) ---
    // const connectedPhoneRaw = req.body.connectedPhone; // REMOVIDO - J√° pego via extractedData
    console.log("DEBUG: Valor de connectedPhoneRaw recebido √©:", connectedPhoneRaw);
    if (!connectedPhoneRaw) {
      console.error("‚ùå Erro cr√≠tico: connectedPhone (identificador da igreja) n√£o encontrado na requisi√ß√£o!", req.body);
      // Enviar resposta de erro para o WhatsApp e para a requisi√ß√£o HTTP
      // Verifica se formattedTelefone (remetente) existe antes de tentar enviar a mensagem
      if (formattedTelefone) {
          // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
          await enviarMensagemWhatsApp(formattedTelefone, "‚ùå Ocorreu um erro interno (ID Igreja). Por favor, contate o suporte."); 
      }
      return res.status(400).send({ error: "Identificador da igreja (connectedPhone) n√£o encontrado." });
    }
    
    // Normaliza o connectedPhone para usar como igrejaId (FUN√á√ÉO DEFINIDA ACIMA)
    const igrejaId = formattedTelefone;
    console.log("DEBUG: Resultado de normalizarTelefoneBrasil(connectedPhoneRaw) √©:", igrejaId);
    if (!igrejaId) { // A normaliza√ß√£o agora retorna null em caso de falha
        console.error(`‚ùå Erro cr√≠tico: Falha ao normalizar connectedPhone '${connectedPhoneRaw}' para igrejaId.`);
        // Verifica se formattedTelefone (remetente) existe antes de tentar enviar a mensagem
        if (formattedTelefone) {
            // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
            await enviarMensagemWhatsApp(formattedTelefone, "‚ùå Ocorreu um erro interno (ID Igreja Inv√°lido). Por favor, contate o suporte."); 
        }
        return res.status(400).send({ error: "Falha ao normalizar identificador da igreja." });
    }
    // A verifica√ß√£o .startsWith("+55") √© redundante se a normaliza√ß√£o sempre retorna nesse formato ou null
    
    console.log(`‚úÖ Processando requisi√ß√£o para Igreja ID: ${igrejaId}`);
    // --- FIM: Bloco para Obter e Normalizar igrejaId ---

    // Verificar se a mensagem √© do pr√≥prio bot
    if (fromMe) {
      console.log("üì© Mensagem enviada pelo pr√≥prio bot. Ignorando.");
      return res.status(200).send({ message: "Mensagem enviada pelo pr√≥prio bot. Ignorada." });
    }

    // Valida√ß√£o do telefone do remetente (j√° deve estar normalizado)
    if (!formattedTelefone || typeof formattedTelefone !== "string" || formattedTelefone.trim() === "") {
      console.error("‚ùå Telefone do remetente inv√°lido ap√≥s extra√ß√£o:", formattedTelefone);
      // N√£o deveria acontecer se a extra√ß√£o/normaliza√ß√£o funcionou
      return res.status(400).send({ error: "Telefone do remetente n√£o fornecido ou inv√°lido" });
    }

    // Valida√ß√£o inicial da mensagem, √°udio ou imagem
    if (!mensagem && !urlAudio && !urlImagem) {
      console.log("‚ùå Nenhuma mensagem, √°udio ou imagem encontrada na requisi√ß√£o.");
      // Se chegou aqui, a extra√ß√£o falhou em pegar qualquer conte√∫do √∫til
      return res.status(400).send({ error: "Nenhuma mensagem, √°udio ou imagem encontrada na requisi√ß√£o." });
    }

    // Processamento de √°udio
    if (urlAudio && typeof urlAudio === "string" && urlAudio.startsWith("http")) {
      try {
        console.log("üì• Tentando baixar √°udio de:", urlAudio);
        // !!! GARANTA QUE fetch ESTEJA DISPON√çVEL (node-fetch?) !!!
        const resposta = await fetch(urlAudio);
        if (!resposta.ok) {
          throw new Error(`Falha ao baixar o √°udio: ${resposta.status} ${resposta.statusText}`);
        }
        const arrayBuffer = await resposta.arrayBuffer();
        const buffer = Buffer.from(arrayBuffer);

        console.log("üéôÔ∏è √Åudio baixado, enviando para transcri√ß√£o...");
         // !!! GARANTA QUE openai ESTEJA CONFIGURADO/IMPORTADO !!!
        const transcriptionResult = await openai.audio.transcriptions.create({
          // file: buffer, // Passar como File-like object
          file: new File([buffer], "audio.ogg", { type: "audio/ogg" }), // Tentar criar File object
          model: "whisper-1",
          response_format: "text",
        });
        
        // A API pode retornar um objeto, pegue o texto de dentro
        const transcription = typeof transcriptionResult === 'string' ? transcriptionResult : transcriptionResult.text;

        if (!transcription || transcription.trim().length === 0) {
            console.warn("‚ö†Ô∏è Transcri√ß√£o de √°udio resultou em texto vazio.");
            throw new Error("Transcri√ß√£o de √°udio vazia.");
        }

        mensagem = transcription; // Sobrescreve a mensagem original com a transcri√ß√£o
        console.log("üéôÔ∏è √Åudio transcrito com sucesso:", mensagem);
      } catch (error) {
        console.error("‚ùå Erro ao transcrever √°udio:", error.message, error.stack);
        // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
        const sucesso = await enviarMensagemWhatsApp(
          formattedTelefone,
          "‚ùå N√£o consegui entender o √°udio. Tente novamente com uma voz mais clara ou mais curta."
        );
        if (!sucesso) {
          console.error("‚ùå Falha ao enviar mensagem de erro de √°udio via Z-API.");
          return res.status(500).send({ error: "Erro ao processar √°udio e enviar mensagem de erro", details: error.message });
        }
        // Retorna 400 para indicar que a requisi√ß√£o do usu√°rio n√£o p√¥de ser processada
        return res.status(400).send({ error: "Erro ao processar √°udio" }); 
      }
    }

    // Processamento de imagem (ex.: comprovante)
    if (urlImagem && typeof urlImagem === "string" && urlImagem.startsWith("http")) {
      try {
        console.log("üñºÔ∏è Processando imagem:", urlImagem);
         // !!! GARANTA QUE openai ESTEJA CONFIGURADO/IMPORTADO !!!
        const description = await openai.chat.completions.create({
          model: "gpt-4-vision-preview", // ou gpt-4o
          max_tokens: 300,
          messages: [
            {
              role: "user",
              content: [
                { type: "text", text: "Descreva o conte√∫do da imagem. Se for um comprovante de PIX ou transfer√™ncia, extraia o VALOR, a DATA (se houver) e o NOME ou CPF/CNPJ do destinat√°rio (se houver). Se for outro tipo de imagem, apenas descreva brevemente." },
                { type: "image_url", image_url: { url: urlImagem, detail: "low" } }, // detail: low pode ser mais r√°pido e barato
              ],
            },
          ],
        });

        const imageContent = description.choices[0]?.message?.content;
        if (!imageContent || imageContent.trim().length === 0) {
            console.warn("‚ö†Ô∏è An√°lise de imagem resultou em texto vazio.");
            throw new Error("An√°lise de imagem vazia.");
        }
        
        // Decide se usa a descri√ß√£o da imagem como a mensagem principal
        // Pode ser √∫til concatenar ou apenas usar a descri√ß√£o
        mensagem = imageContent; // Sobrescreve a mensagem original
        console.log("üñºÔ∏è Imagem processada com sucesso:", mensagem);
      } catch (error) {
        console.error("‚ùå Erro ao processar imagem:", error.message, error.stack);
         // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
        const sucesso = await enviarMensagemWhatsApp(
          formattedTelefone,
          "‚ùå N√£o consegui processar a imagem. Envie um texto ou uma imagem mais clara."
        );
        if (!sucesso) {
          console.error("‚ùå Falha ao enviar mensagem de erro de imagem via Z-API.");
          return res.status(500).send({ error: "Erro ao processar imagem e enviar mensagem de erro", details: error.message });
        }
         // Retorna 400 para indicar que a requisi√ß√£o do usu√°rio n√£o p√¥de ser processada
        return res.status(400).send({ error: "Erro ao processar imagem" });
      }
    }

    // Verificar se a mensagem √© v√°lida AP√ìS processamento de m√≠dia
    if (!mensagem || typeof mensagem !== "string" || mensagem.trim().length === 0) {
      console.warn("‚ö†Ô∏è Mensagem final vazia ou inv√°lida ap√≥s processamento de m√≠dia:", mensagem);
      // Enviar uma resposta padr√£o ou erro?
      // Poderia enviar a mensagem padr√£o aqui tamb√©m.
      // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
       await enviarMensagemWhatsApp(formattedTelefone, "N√£o entendi sua mensagem ou a m√≠dia enviada. Pode tentar de outra forma?");
      return res.status(400).send({ error: "Mensagem n√£o fornecida ou inv√°lida ap√≥s processamento" });
    }

    console.log(`‚úÖ Mensagem final v√°lida ("${mensagem}"), prosseguindo para classifica√ß√£o...`);

    // Classifica√ß√£o com pr√©-filtro
    // !!! GARANTA QUE classificarMensagem ESTEJA DEFINIDA/IMPORTADA !!!
    const classificacao = classificarMensagemComLogs(mensagem);
    console.log("Resultado da Classifica√ß√£o:", JSON.stringify(classificacao, null, 2));

    // Adicionar l√≥gica para cadastro de membros dentro de um try/catch
    if (classificacao.tipo === "cadastro") {
      console.log("üì¨ Entrou no bloco de CADASTRO");
      // console.log("üìû Telefone enviado para cadastrarMembroWhatsApp:", formattedTelefone);
      // console.log("üìù Mensagem enviada para cadastrarMembroWhatsApp:", mensagem);
      try {
        // !!! GARANTA QUE cadastrarMembroWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
        const respostaCadastro = await cadastrarMembroWhatsApp(mensagem, formattedTelefone, igrejaId); 
        console.log("üì§ Enviando resposta de cadastro para o WhatsApp:", respostaCadastro);
         // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
        const sucesso = await enviarMensagemWhatsApp(formattedTelefone, respostaCadastro);
        if (!sucesso) {
          console.error("‚ùå Falha ao enviar mensagem de cadastro via Z-API.");
          // N√£o retorna erro 500 aqui, pois o cadastro pode ter funcionado, s√≥ o envio falhou
          return res.status(200).send({ warning: "Cadastro processado, mas falha ao enviar confirma√ß√£o via Z-API" });
        }
        console.log("‚úÖ Mensagem de cadastro enviada com sucesso para o WhatsApp!");
        return res.sendStatus(200);
      } catch (error) {
        console.error("‚ùå Erro ao processar cadastro:", error.message, error.stack);
         // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
        const sucesso = await enviarMensagemWhatsApp(
          formattedTelefone,
          "‚ùå Ocorreu um erro ao processar o cadastro. Tente novamente ou entre em contato com o suporte."
        );
        // Retorna 500 pois o processamento principal falhou
        return res.status(500).send({ error: "Erro ao processar cadastro", details: error.message });
      }
    }

    if (classificacao.tipo === "financeiro") {
      console.log("üí∏ Entrou no bloco de FINANCEIRO");
      try {
        let respostaFormatada = "";
    
        if (classificacao.subTipo === "multiplos_dizimos") {
          console.log("üßæ Processando m√∫ltiplos d√≠zimos...");
          // !!! GARANTA QUE processarDizimos ESTEJA DEFINIDA/IMPORTADA E FUNCIONANDO CORRETAMENTE !!!
          // Esta fun√ß√£o deve retornar um array de objetos, onde cada objeto tem: { nomeMembro: 'Nome', valor: 100.00, modoPagamento: 'pix' }
          const dizimos = await processarDizimos(mensagem, igrejaId);
          if (!dizimos || dizimos.length === 0) {
            respostaFormatada = "‚ùå Nenhum d√≠zimo v√°lido encontrado na mensagem. Verifique o formato: primeira linha 'D√≠zimos:', depois 'Nome Completo Valor Modo' por linha.";
          } else {
            let listaDizimosFormatada = "üìã Lista de d√≠zimos:\n";
            let totalPix = 0;
            let totalCartao = 0;
            let totalDinheiro = 0;
            let valorTotalGeral = 0;
    
            for (const dizimo of dizimos) {
              const valor = parseFloat(dizimo.valor) || 0;
              const modoPagamentoNormalizado = dizimo.modoPagamento?.toLowerCase().trim() || "desconhecido";
              
              if (modoPagamentoNormalizado === "pix") totalPix += valor;
              else if (modoPagamentoNormalizado === "cartao" || modoPagamentoNormalizado === "cart√£o") totalCartao += valor;
              else if (modoPagamentoNormalizado === "dinheiro") totalDinheiro += valor;
              valorTotalGeral += valor;
    
              // Formato do item da lista conforme exemplo do usu√°rio
              listaDizimosFormatada += `* ${dizimo.nomeMembro || "Membro n√£o identificado"}: R$ ${valor.toFixed(2)} (${dizimo.modoPagamento || "Modo n√£o informado"})\n`;
            }
    
            const dataAtual = new Date();
            // Montando a resposta conforme o exemplo do usu√°rio
            respostaFormatada = `üí∏ D√≠zimos registrados com sucesso!\n` +
                                `${listaDizimosFormatada}\n` + // Adiciona uma linha em branco ap√≥s a lista
                                `üìä Totais por Tipo de Transa√ß√£o:\n` +
                                (totalPix > 0 ? `üì≤ TOTAL PIX: R$ ${totalPix.toFixed(2)}\n` : "") +
                                (totalCartao > 0 ? `üí≥ TOTAL CART√ÉO: R$ ${totalCartao.toFixed(2)}\n` : "") +
                                (totalDinheiro > 0 ? `üíµ TOTAL DINHEIRO: R$ ${totalDinheiro.toFixed(2)}\n` : "") +
                                `üìÖ Data: ${dataAtual.toLocaleDateString("pt-BR")}\n` +
                                `üí∞ Valor Total: R$ ${valorTotalGeral.toFixed(2)}\n` +
                                `üóÇÔ∏è Salvo no sistema e nos cadastros dos membros!`;
          }
        } else {
          console.log("üí∞ Processando transa√ß√£o financeira √∫nica...");
         // Extrai os detalhes da classifica√ß√£o, incluindo as novas categorias
         const { tipo, categoriaPrincipal, subCategoria, categoria: categoriaLegada, valor } = classificacao.detalhes || {}; 
         
         // Valida√ß√£o ajustada para as novas categorias
         if (!tipo || !categoriaPrincipal || !subCategoria || !categoriaLegada || valor === undefined || valor === null) {
             console.error("‚ùå Detalhes da classifica√ß√£o financeira (√∫nica) incompletos:", classificacao.detalhes);
             throw new Error("N√£o foi poss√≠vel extrair tipo, categorias detalhadas ou valor da mensagem financeira.");
         }
         
         const nomeMembro = await detectarNomeMembro(mensagem, igrejaId);
         
         console.log(`DEBUG: Chamando registrarTransacaoFinanceira com igrejaId: ${igrejaId}`); // Log adicional para confirmar

         respostaFormatada = await registrarTransacaoFinanceira(
           mensagem,           // mensagemOriginal
           formattedTelefone,  // telefoneRemetente
           tipo,               // tipoTransacao
           categoriaPrincipal, // categoriaPrincipal (NOVO)
           subCategoria,       // subCategoria (NOVO)
           categoriaLegada,    // categoriaLegada (NOVO, era o antigo 'categoria')
           valor,              // valor
           nomeMembro,         // nomeMembroDetectado
           igrejaId            // igrejaId (AGORA NA POSI√á√ÉO CORRETA)
           // descricaoOpcional (pode ser adicionado se necess√°rio, ou deixado como default null na fun√ß√£o)
         );
       }
    
        console.log("üì§ Enviando resposta financeira para o WhatsApp:", respostaFormatada);
         // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
        const sucesso = await enviarMensagemWhatsApp(formattedTelefone, respostaFormatada);
        if (!sucesso) {
          console.error("‚ùå Falha ao enviar mensagem financeira via Z-API.");
           return res.status(200).send({ warning: "Transa√ß√£o processada, mas falha ao enviar confirma√ß√£o via Z-API" });
        }
        console.log("‚úÖ Mensagem financeira enviada com sucesso para o WhatsApp!");
        return res.sendStatus(200);
      } catch (error) {
        console.error("‚ùå Erro no processamento financeiro:", error.message, error.stack);
         // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
        const sucesso = await enviarMensagemWhatsApp(
          formattedTelefone,
          "‚ùå Ocorreu um erro ao processar a transa√ß√£o financeira. Verifique os dados ou contate o suporte."
        );
        return res.status(500).send({ error: "Erro ao processar transa√ß√£o financeira", details: error.message });
      }
    }

    if (classificacao.tipo === "relatorio") {
      console.log("üìä Entrou no bloco de RELAT√ìRIO");
      try {
        let resposta;
        const periodo = classificacao.periodo; // Ex: 'hoje', 'semana', 'mes', 'personalizado'
        const datas = classificacao.datas; // Array com [dataInicio, dataFim] se personalizado

        if (!periodo) {
             throw new Error("Tipo de per√≠odo do relat√≥rio n√£o identificado na classifica√ß√£o.");
        }

        // !!! GARANTA QUE gerarRelatorio ESTEJA DEFINIDA/IMPORTADA !!!
        resposta = await gerarRelatorio(periodo, igrejaId, datas ? datas[0] : null, datas ? datas[1] : null);
        
        // Verifica se a resposta √© v√°lida antes de enviar
        if (!resposta || typeof resposta !== 'string' || resposta.trim().length === 0) {
            console.warn("‚ö†Ô∏è Fun√ß√£o gerarRelatorio retornou resposta vazia ou inv√°lida.");
            resposta = "‚ùå N√£o foi poss√≠vel gerar o relat√≥rio solicitado. Verifique o per√≠odo ou tente novamente.";
        }

        console.log("üì§ Enviando resposta de relat√≥rio para o WhatsApp (primeiros 200 chars):", resposta.substring(0,200));
         // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
        const sucesso = await enviarMensagemWhatsApp(formattedTelefone, resposta);
        if (!sucesso) {
          console.error("‚ùå Falha ao enviar mensagem de relat√≥rio via Z-API.");
           return res.status(200).send({ warning: "Relat√≥rio gerado, mas falha ao enviar via Z-API" });
        }
        console.log("‚úÖ Mensagem de relat√≥rio enviada com sucesso para o WhatsApp!");
        return res.sendStatus(200);
      } catch (error) {
        console.error("‚ùå Erro ao gerar relat√≥rio:", error.message, error.stack);
         // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
        const sucesso = await enviarMensagemWhatsApp(
          formattedTelefone,
          "‚ùå Ocorreu um erro ao gerar o relat√≥rio. Tente novamente ou entre em contato com o suporte."
        );
        return res.status(500).send({ error: "Erro ao gerar relat√≥rio", details: error.message });
      }
    }

    // Caso o pr√©-filtro n√£o identifique, usar IA
    console.log("ü§ñ Pr√©-filtro n√£o classificou. Enviando para IA...");
    try {
      // !!! GARANTA QUE openai ESTEJA CONFIGURADO/IMPORTADO !!!
      const respostaIA = await openai.chat.completions.create({
        model: "gpt-3.5-turbo", // Ou outro modelo dispon√≠vel
        messages: [
          {
            role: "system",
            content: `Voc√™ √© um assistente de igreja. Classifique a mensagem do usu√°rio em uma das categorias: 'cadastro', 'financeiro', 'relatorio' ou 'outro'.
- 'cadastro': Dados pessoais de membros (nome, idade, etc.).
- 'financeiro': Dinheiro, valores, d√≠zimo, ofertas, pagamentos, gastos.
- 'relatorio': Pedido de relat√≥rio financeiro.
- 'outro': Qualquer outra coisa.
Responda APENAS com a palavra da categoria em min√∫sculas.`
          },
          { role: "user", content: mensagem }
        ],
        temperature: 0.2, // Baixa temperatura para classifica√ß√£o
        max_tokens: 10
      });

      const tipoIA = respostaIA.choices[0]?.message?.content?.toLowerCase().trim();
      console.log("ü§ñ Classifica√ß√£o da IA:", tipoIA);

      // AGORA, TENTA REUTILIZAR A L√ìGICA PRINCIPAL COM BASE NA CLASSIFICA√á√ÉO DA IA
      if (tipoIA === "cadastro") {
        console.log("üì¨ IA classificou como CADASTRO. Reutilizando bloco...");
        // Copia a l√≥gica do bloco if (classificacao.tipo === "cadastro") aqui
        // (√â importante garantir que as fun√ß√µes chamadas aqui tamb√©m estejam dispon√≠veis)
        try {
          const respostaCadastro = await cadastrarMembroWhatsApp(mensagem, formattedTelefone, igrejaId);
          const sucesso = await enviarMensagemWhatsApp(formattedTelefone, respostaCadastro);
          if (!sucesso) return res.status(200).send({ warning: "Cadastro (via IA) processado, mas falha ao enviar confirma√ß√£o" });
          return res.sendStatus(200);
        } catch (error) {
          console.error("‚ùå Erro ao processar cadastro (via IA):", error.message, error.stack);
          await enviarMensagemWhatsApp(formattedTelefone, "‚ùå Ocorreu um erro ao processar o cadastro (via IA). Tente novamente.");
          return res.status(500).send({ error: "Erro ao processar cadastro (via IA)", details: error.message });
        }
      } else if (tipoIA === "financeiro") {
        console.log("üí∏ IA classificou como FINANCEIRO. Reutilizando bloco (simplificado)...");
        // Idealmente, a IA deveria extrair mais detalhes, mas vamos tentar registrar como gen√©rico
        // Ou chamar uma fun√ß√£o espec√≠fica para processamento p√≥s-IA
        try {
          // Tenta registrar como uma transa√ß√£o gen√©rica ou pede mais detalhes
          // Aqui, vamos apenas enviar uma mensagem indicando que precisa de mais detalhes ou formato espec√≠fico
           const respostaFinIA = "Entendi que sua mensagem √© sobre finan√ßas, mas n√£o consegui process√°-la automaticamente. Para d√≠zimos, use 'D√≠zimos:' na primeira linha. Para outras transa√ß√µes, tente 'Entrada/Sa√≠da [Descri√ß√£o] [Valor]'.";
          // const nomeMembro = await detectarNomeMembro(mensagem, igrejaId);
          // const respostaFinIA = await registrarTransacaoFinanceira(mensagem, formattedTelefone, '?', '?', 0, nomeMembro, igrejaId); // Exemplo de chamada gen√©rica
          const sucesso = await enviarMensagemWhatsApp(formattedTelefone, respostaFinIA);
          if (!sucesso) return res.status(200).send({ warning: "Financeiro (via IA) identificado, mas falha ao enviar resposta" });
          return res.sendStatus(200);
        } catch (error) {
          console.error("‚ùå Erro ao processar financeiro (via IA):", error.message, error.stack);
          await enviarMensagemWhatsApp(formattedTelefone, "‚ùå Ocorreu um erro ao processar a transa√ß√£o financeira (via IA).");
          return res.status(500).send({ error: "Erro ao processar financeiro (via IA)", details: error.message });
        }
      } else if (tipoIA === "relatorio") {
        console.log("üìä IA classificou como RELAT√ìRIO. Reutilizando bloco...");
        // Tenta gerar um relat√≥rio padr√£o (ex: m√™s atual) ou pede per√≠odo
        try {
          // Vamos pedir para especificar o per√≠odo
          const respostaRelIA = "Entendi que voc√™ quer um relat√≥rio. Por favor, especifique o per√≠odo (ex: 'relat√≥rio da semana', 'relat√≥rio do m√™s', 'relat√≥rio personalizado DD/MM/AAAA DD/MM/AAAA').";
          // const respostaRelIA = await gerarRelatorio('mes', igrejaId); // Tenta gerar do m√™s atual
          const sucesso = await enviarMensagemWhatsApp(formattedTelefone, respostaRelIA);
          if (!sucesso) return res.status(200).send({ warning: "Relat√≥rio (via IA) identificado, mas falha ao enviar resposta" });
          return res.sendStatus(200);
        } catch (error) {
          console.error("‚ùå Erro ao gerar relat√≥rio (via IA):", error.message, error.stack);
          await enviarMensagemWhatsApp(formattedTelefone, "‚ùå Ocorreu um erro ao gerar o relat√≥rio (via IA).");
          return res.status(500).send({ error: "Erro ao gerar relat√≥rio (via IA)", details: error.message });
        }
      } else {
        // tipoIA === 'outro' ou classifica√ß√£o falhou
        console.log("‚ùì IA classificou como 'outro' ou falhou. Enviando resposta padr√£o.");
        const mensagemPadrao = "Ol√°! Sou o assistente da igreja. Posso ajudar com cadastros de membros, registro de d√≠zimos/transa√ß√µes financeiras e gera√ß√£o de relat√≥rios. Como posso te ajudar hoje?";
        
        // !!! ADICIONE O LOG AQUI !!!
        console.log(`>>> VALOR DA MENSAGEM ANTES DE ENVIAR: ${mensagemPadrao}`);
      
        // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
        const sucesso = await enviarMensagemWhatsApp(
          formattedTelefone,
          mensagemPadrao
        );
        if (!sucesso) {
          console.error("‚ùå Falha ao enviar mensagem padr√£o (p√≥s-IA) via Z-API.");
          return res.status(500).send({ error: "Erro ao enviar mensagem padr√£o via Z-API", details: "Falha no Z-API" });
        }
        return res.sendStatus(200);
      }
      
    } catch (iaError) {
        console.error("‚ùå Erro durante a classifica√ß√£o ou tratamento via IA:", iaError.message, iaError.stack);
        // Envia resposta padr√£o em caso de erro na IA
        const sucesso = await enviarMensagemWhatsApp(
          formattedTelefone,
          "Ol√°! Tive um problema ao processar sua mensagem com a intelig√™ncia artificial. Pode tentar novamente ou usar um comando mais direto (cadastro, financeiro, relat√≥rio)?"
        );
         if (!sucesso) {
          console.error("‚ùå Falha ao enviar mensagem de erro da IA via Z-API.");
          return res.status(500).send({ error: "Erro ao enviar mensagem de erro da IA via Z-API", details: "Falha no Z-API" });
        }
        return res.sendStatus(200); // Retorna 200 pois enviamos uma resposta ao usu√°rio
    }

  } catch (error) {
    // Bloco CATCH GERAL da fun√ß√£o receberMensagemWhatsApp
    console.error("‚ùå ERRO GERAL CAPTURADO na fun√ß√£o receberMensagemWhatsApp:", error.message, error.stack);
    
    // Tenta extrair o telefone do remetente MESMO em caso de erro para notificar
    let telefoneErro = null;
    try {
      // Tenta pegar diretamente do body, pois extractMessageAndPhone pode ter falhado
      telefoneErro = req.body?.phone || req.body?.sender || req.body?.from || null;
      if (telefoneErro) {
          let telOriginal = telefoneErro;
          telefoneErro = telefoneErro.replace(/[@c.us|@s.whatsapp.net]/g, "");
          if (!telefoneErro.startsWith("+") && telefoneErro.length >= 10) {
              telefoneErro = "+55" + telefoneErro.replace(/^55/, "");
          }
          console.log(`Telefone para erro recuperado e normalizado de ${telOriginal} para ${telefoneErro}`);
      } else {
          console.error("N√£o foi poss√≠vel extrair telefone do remetente do req.body para enviar msg de erro.");
      }
    } catch (extractError) {
      console.error("‚ùå Erro adicional ao tentar extrair telefone para mensagem de erro geral:", extractError);
    }

    if (telefoneErro) {
      try {
         // !!! GARANTA QUE enviarMensagemWhatsApp ESTEJA DEFINIDA/IMPORTADA !!!
        await enviarMensagemWhatsApp(telefoneErro, "‚ùå Ocorreu um erro inesperado ao processar sua mensagem. A equipe de suporte foi notificada.");
      } catch (sendError) {
        console.error("‚ùå Falha CR√çTICA ao tentar enviar mensagem de erro geral para o remetente:", sendError);
      }
    }
    // Retorna erro 500 para a requisi√ß√£o original, indicando falha no servidor
    return res.status(500).send({ error: "Erro interno do servidor", details: error.message });
  }
}

// Exporte a fun√ß√£o se este for um m√≥dulo (necess√°rio para Cloud Functions)
// Exemplo para Google Cloud Functions (Node.js 18+):
// exports.receberMensagemWhatsApp = receberMensagemWhatsApp;

// Se estiver usando ES Modules (import/export):
// export { receberMensagemWhatsApp };

// ========================================================================
// LEMBRETES IMPORTANTES:
// 1. IMPORTE/DEFINA TODAS AS OUTRAS FUN√á√ïES:
//    - enviarMensagemWhatsApp (para Z-API)
//    - classificarMensagem (seu pr√©-filtro)
//    - cadastrarMembroWhatsApp, processarDizimos, detectarNomeMembro, 
//      registrarTransacaoFinanceira, gerarRelatorio (suas fun√ß√µes de l√≥gica/banco de dados)
//    - Configure o cliente `openai`
//    - Certifique-se que `fetch` est√° dispon√≠vel ou importe `node-fetch`
//
// 2. AJUSTE A L√ìGICA INTERNA de `extractMessageAndPhone` se os logs mostrarem
//    que os dados n√£o est√£o sendo extra√≠dos corretamente do `req.body`.
//
// 3. IMPLEMENTE OS BLOCOS DE TRATAMENTO P√ìS-IA se quiser que a IA realmente
//    execute as a√ß√µes de cadastro, financeiro e relat√≥rio.
// ========================================================================

// Exportar a fun√ß√£o principal
module.exports = { receberMensagemWhatsApp };

console.log("‚úÖ Webhook inicializado e pronto para receber requisi√ß√µes.");